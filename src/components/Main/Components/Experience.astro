---
import { getCollection } from "astro:content";

import Encabezado from "@/utils/Encabezado.astro";
import ExperienceType from "@/components/Main/Components/Experience/Experience-Type.astro";
import SectionScheme from "@/utils/Section-Scheme.astro";

import { formatYears } from "@/assets/js/Format-Time";
import { getCachedRepos } from "@/api/acces_api"; // Usa la función con cache

import ExperienceIcon from "@/icons/experience.astro";

// Definir tipo para la experiencia
type Experience = {
  title: string;
  date: string;
  description: string;
  download: string;
  badge: string;
};

// Obtener repositorios con cache
const developer: Experience[] = await getCachedRepos().then((repos) =>
  repos.map((res) => {
    const startDate = res.created_at;
    const endDate = res.pushed_at || null;

    const date = formatYears(startDate, endDate);

    return {
      title: res.name || "Título no disponible",
      date: date,
      description: res.description || "Descripción no disponible",
      download: res.html_url || "URL no disponible",
      badge: res.language ? `latest ${res.language}` : "Sin destacados",
    };
  })
);

// Obtener experiencias desde Astro Content Collection
const experiences = await getCollection("experiences");

// Filtrar según tipo de experiencia
const atteClient: Experience[] = experiences
  .filter(({ data }) => data.type === "AtteClient")
  .map(({ data }) => ({
    title: data.title,
    date: data.date,
    description: data.description,
    download: data.download || "",
    badge: data.badge,
  }));

const technical: Experience[] = experiences
  .filter(({ data }) => data.type === "Technical")
  .map(({ data }) => ({
    title: data.title,
    date: data.date,
    description: data.description,
    download: data.download || "",
    badge: data.badge,
  }));

// Lista final de experiencias
const EXPERIENCES = [
  {
    title: "Como desarrollador:",
    color: "green",
    items: developer,
  },
  {
    title: "En atención al cliente:",
    color: "yellow",
    items: atteClient,
  },
  {
    title: "Como técnico ensamblador:",
    color: "purple",
    items: technical,
  },
];
---

<SectionScheme id="experiencia" className="gap-10 mb-40">
  <Encabezado title="Experiencia Laboral">
    <ExperienceIcon class="size-7 xl:size-9" />
  </Encabezado>
  <div
    class="w-full grid grid-cols-1 grid-rows-auto lg:grid-cols-2 lg:grid-rows-2 gap-5"
  >
    {
      EXPERIENCES.map(({ title, color, items }, index) => (
        <ExperienceType
          title={title}
          color={color}
          experiences={items}
          class={`p-4 ${index === 0 ? "row-span-2" : "row-span-1"}`}
        />
      ))
    }
  </div>
</SectionScheme>
